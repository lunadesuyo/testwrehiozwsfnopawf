{"name":"Rage","type":"script","author":"RoD9QmAeldkRTqNP","img":"icons/creatures/abilities/mouth-teeth-human.webp","scope":"global","command":"game.dnd5e.macros.rollItem(\"Rage\")\n\n// Enable all rage effects\nconst effectNames = [\"Rage\", \"Spirit of the Elk\"];\nconst filter = token.actor.effects.filter(i => effectNames.includes(i.data.label));\nconst updates = filter.map(i => ({_id: i.id, disabled: !i.data.disabled}));\nawait token.actor.updateEmbeddedDocuments(\"ActiveEffect\", updates);\n\n// Wild Surge\nconst surge = actor.items.getName(\"Wild Surge\");\nif(surge.hasMacro()) await surge.executeMacro();\nelse await surge.roll();","folder":null,"sort":0,"permission":{"default":0,"RoD9QmAeldkRTqNP":3},"flags":{"core":{"sourceId":"Macro.sjxXx1F9XqgWITyQ"}},"_id":"AsjuPafHwE0D0jqs"}
{"_id":"XSuQe3bQ2Kx6yDq5","name":"Divine Smite","type":"script","author":"7VbuHmckfo5rIhG3","img":"icons/skills/melee/weapons-crossed-swords-teal.webp","scope":"global","command":"// DIVINE SMITE\n// required modules: none.\n\nconst rollData = foundry.utils.duplicate(actor.getRollData());\nconst inputs = Object.entries(rollData.spells).filter(s => {\n    return s[1].value > 0;\n}).map(([key, { value, max }]) => {\n    const crd = key === \"pact\" ? \"Pact Slot\" : nth(Number(key.at(-1)));\n    return [key, crd, value, max];\n});\nif ( inputs.length < 1 ) {\n    ui.notifications.warn(\"You have no spell slots remaining.\");\n    return;\n}\n\nconst options = inputs.reduce((acc, [key, crd, value, max]) => {\n    return acc + `<option value=\"${key}\">${crd} (${value}/${max})</option>`;\n}, \"\");\n\nconst content = `\n<form>\n    <div class=\"form-group\">\n        <label style=\"flex: 1;\">Spell Slot:</label>\n        <div class=\"form-fields\">\n            <select id=\"smite-slot\">${options}</select>\n            <input type=\"checkbox\" id=\"extra-die\"></input>\n            <label for=\"extra-die\" style=\"white-space: nowrap;\">Extra die</label>\n        </div>\n    </div>\n</form>`;\n\nnew Dialog({\n    title: \"Divine Smite\",\n    content,\n    buttons: {\n        smite: {\n            icon: \"<i class='fas fa-gavel'></i>\",\n            label: \"Smite!\",\n            callback: async (html) => await rollDamage(html)\n        }\n    }\n}).render(true);\n\nfunction nth(n){return n + ([\"st\",\"nd\",\"rd\"][((n+90)%100-10)%10-1]||\"th\")}\n\nasync function rollDamage(html){\n    const slot = html[0].querySelector(\"#smite-slot\").value;\n    const extra = html[0].querySelector(\"#extra-die\").checked;\n    const level = slot === \"pact\" ? rollData.spells[\"pact\"].level : Number(slot.at(-1));\n    const dice = Math.min(5, 1 + level) + (extra ? 1 : 0);\n    const formula = `${dice}d8`;\n\n    const damageRoll = await new Item.implementation({\n        type: \"feat\",\n        name: \"Divine Smite\",\n        system: { damage: { parts: [[formula, \"radiant\"]] } }\n    }, { parent: actor }).rollDamage();\n    if ( !damageRoll ) return;\n    const value = rollData.spells[slot].value - 1;\n    return actor.update({ [`system.spells.${slot}.value`]: value });\n}","folder":null,"sort":0,"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.iJxZiHJqopxnfHX4"}},"ownership":{"default":0,"7VbuHmckfo5rIhG3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665009204217,"lastModifiedBy":"UjfixXuqstXNdypa"}}
{"name":"Potion of Healing","type":"script","author":"7VbuHmckfo5rIhG3","img":"icons/consumables/potions/potion-tube-corked-red.webp","scope":"global","command":"/*\n * This macro helps you choose your healing potions\n * To use, select your token on the map and then run this macro\n * If you have only one type of healing potion on your character, it will be used\n * If you have several types of healing potions on your character, you will be asked which one to use\n*/\n\n// Only one token can be selected\nif(canvas.tokens.controlled.length != 1){\n    ui.notifications.error(\"Please select a single token.\");\n    return;\n}\n\n// Definitions\nlet s_actor = canvas.tokens.controlled[0].actor\nconst potions = s_actor.itemTypes.consumable.filter(i => i.data.data.consumableType === \"potion\" && i.data.data.actionType === \"heal\");\n\nif(potions.length === 0){\n    ui.notifications.error(\"You don't have any healing potions.\");\n    return;\n}\n\nif(potions.length === 1){\n    s_actor.items.get(potions[0].id).roll();\n    return;\n}\n\n// Create the options available for the prompt\nlet confirmed = false;\nconst optionsText = potions.reduce((acc, e) => acc += `<option value=\"${e.id}\">${e.data.name}</option>`, ``);\n\n// Create a dialogue box to select from available potions\nnew Dialog({\n    title: \"Macro: Healing Potion\",\n    content: `\n    <form id=\"use-potion-form\">\n        <p>` + game.i18n.format(\"Select which potion you'd like to use.\") + `</p>\n        <div class=\"form-group\">\n            <label>Potion Strength</label>\n            <div class=\"form-fields\">\n                <select name=\"potion-strength\">` + optionsText + `</select>\n            </div>\n        </div>\n        <div style=\"height:12px;\"></div>\n    </form>\n    `,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"Heal\",\n            callback: () => confirmed = true\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => confirmed = false\n        }\n    },\n    default: \"Cancel\",\n    close: html => {\n        if (confirmed) {\n            const id = html[0].querySelector(`[name=potion-strength]`).value;\n            s_actor.items.get(id).roll();\n        }\n    }\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"7VbuHmckfo5rIhG3":3},"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.01bstHClwEgvOCPz"}},"_id":"bnxH0hvOuHjmarGU"}
{"_id":"couCfqHU2tDB1RBn","name":"Lay on Hands","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/magic/light/orbs-hand-gray.webp","scope":"global","command":"// LAY ON HANDS\n// required modules: itemacro\n\nconst { value } = item.system.uses;\nif ( value < 1 ) {\n    ui.notifications.warn(`${item.name} has no uses left.`);\n    return;\n}\nconst content = `\n<p>Lay on Hands has ${value} uses left.</p>\n<form>\n    <div class=\"form-group\">\n        <label for=\"num\">Hit points to restore:</label>\n        <div class=\"form-fields\">\n            <input id=\"num\" type=\"number\" value=\"1\"></input>\n        </div>\n    </div>\n</form>`;\n\nconst buttons = {\n    heal: {\n        icon: \"<i class='fa-solid fa-hand-holding-heart'></i>\",\n        label: \"Heal!\",\n        callback: async (html) => {\n            const number = Number(html[0].querySelector(\"#num\").value);\n            if ( number < 1 || number > value ) {\n                ui.notifications.warn(\"Invalid number.\");\n                return;\n            }\n            await new Roll(`${number}`).toMessage({\n                speaker: ChatMessage.getSpeaker({ actor }),\n                flavor: item.name\n            });\n            return item.update({ \"system.uses.value\": value - number });\n        }\n    }\n}\nif ( value >= 5 ) {\n    buttons.cure = {\n        icon: \"<i class='fa-solid fa-virus'></i>\",\n        label: \"Cure!\",\n        callback: async (html) => {\n            await ChatMessage.create({\n                content: `${actor.name} cures a disease or poison.`,\n                speaker: ChatMessage.getSpeaker({ actor })\n            });\n            return item.update({ \"system.uses.value\": value - 5 });\n        }\n    }\n}\n\nnew Dialog({ title: \"Lay on Hands\", content, buttons }).render(true);","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.FyepIdR9xjN16pHc"}},"ownership":{"default":0,"EHpONhziSoZpUpN3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665009343042,"lastModifiedBy":"UjfixXuqstXNdypa"}}
{"name":"Testing Macro","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/sundries/misc/key-short-red.webp","scope":"global","command":"// View an actor's properties in the console\nlet s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;\nconsole.log(s_actor);","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.4PnyeFE870GDJVyb"}},"_id":"qUvzdS38EO9gnuzW","ownership":{"default":0,"EHpONhziSoZpUpN3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.288","createdTime":null,"modifiedTime":1667325500265,"lastModifiedBy":"EHpONhziSoZpUpN3"}}
{"_id":"rP81zDVfNTzqnRhf","name":"Toggle Rage","type":"script","author":"EHpONhziSoZpUpN3","img":"icons/skills/wounds/injury-body-pain-gray.webp","scope":"actor","command":"// Define names of effects to toggle\nconst effectNames = [\"Rage\", \"Spirit of the Elk\"];\n\nconst filter = token.actor.effects.filter(i => effectNames.includes(i.data.label));\nconst updates = filter.map(i => ({_id: i.id, disabled: !i.data.disabled}));\nawait token.actor.updateEmbeddedDocuments(\"ActiveEffect\", updates);","folder":null,"sort":0,"flags":{"dnd5e":{"effectMacro":true},"core":{"sourceId":"Macro.MXOslJDsChyqBfS0"}},"ownership":{"default":0,"EHpONhziSoZpUpN3":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1665008296106,"lastModifiedBy":"UjfixXuqstXNdypa"}}
